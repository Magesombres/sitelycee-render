#!/usr/bin/env node

/**
 * Script de v√©rification pr√©-d√©ploiement
 * 
 * Ce script v√©rifie que votre application est pr√™te √† √™tre d√©ploy√©e sur Render.
 * 
 * Usage:
 *   node scripts/pre_deploy_check.js
 */

const fs = require('fs');
const path = require('path');

console.log('\nüîç V√©rification pr√©-d√©ploiement pour Render\n');
console.log('‚ïê'.repeat(60));

let errors = 0;
let warnings = 0;

// V√©rification 1: Fichiers essentiels
console.log('\nüìÅ V√©rification des fichiers essentiels...');
const requiredFiles = [
  'index.js',
  'package.json',
  '.env.example',
  '.gitignore',
  'Procfile',
];

requiredFiles.forEach(file => {
  if (fs.existsSync(path.join(__dirname, '..', file))) {
    console.log(`  ‚úÖ ${file}`);
  } else {
    console.log(`  ‚ùå ${file} manquant`);
    errors++;
  }
});

// V√©rification 2: package.json
console.log('\nüì¶ V√©rification de package.json...');
try {
  const pkg = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
  
  if (pkg.scripts && pkg.scripts.start) {
    console.log(`  ‚úÖ Script "start" d√©fini: ${pkg.scripts.start}`);
  } else {
    console.log('  ‚ùå Script "start" manquant dans package.json');
    errors++;
  }
  
  // V√©rifier les d√©pendances essentielles
  const requiredDeps = ['express', 'mongoose', 'dotenv', 'socket.io', 'zod'];
  requiredDeps.forEach(dep => {
    if (pkg.dependencies && pkg.dependencies[dep]) {
      console.log(`  ‚úÖ D√©pendance "${dep}" pr√©sente`);
    } else {
      console.log(`  ‚ùå D√©pendance "${dep}" manquante`);
      errors++;
    }
  });
} catch (e) {
  console.log('  ‚ùå Erreur lors de la lecture de package.json');
  errors++;
}

// V√©rification 3: .env (ne doit pas √™tre commit√©)
console.log('\nüîê V√©rification de la s√©curit√©...');
if (fs.existsSync(path.join(__dirname, '..', '.env'))) {
  console.log('  ‚ö†Ô∏è  Fichier .env d√©tect√© (local)');
  console.log('      ATTENTION: Assurez-vous qu\'il est dans .gitignore');
  warnings++;
} else {
  console.log('  ‚úÖ Pas de fichier .env (normal pour un repo)');
}

// V√©rification 4: .gitignore
console.log('\nüö´ V√©rification de .gitignore...');
try {
  const gitignore = fs.readFileSync(path.join(__dirname, '..', '.gitignore'), 'utf8');
  
  if (gitignore.includes('.env')) {
    console.log('  ‚úÖ .env est ignor√© par git');
  } else {
    console.log('  ‚ùå .env devrait √™tre dans .gitignore');
    errors++;
  }
  
  if (gitignore.includes('node_modules')) {
    console.log('  ‚úÖ node_modules est ignor√© par git');
  } else {
    console.log('  ‚ùå node_modules devrait √™tre dans .gitignore');
    errors++;
  }
} catch (e) {
  console.log('  ‚ö†Ô∏è  Impossible de lire .gitignore');
  warnings++;
}

// V√©rification 5: Structure des dossiers
console.log('\nüìÇ V√©rification de la structure...');
const requiredDirs = ['models', 'routes', 'middleware', 'realtime', 'public'];
requiredDirs.forEach(dir => {
  if (fs.existsSync(path.join(__dirname, '..', dir))) {
    console.log(`  ‚úÖ Dossier "${dir}" pr√©sent`);
  } else {
    console.log(`  ‚ö†Ô∏è  Dossier "${dir}" manquant`);
    warnings++;
  }
});

// V√©rification 6: Code source
console.log('\nüìù V√©rification du code source...');
try {
  const indexContent = fs.readFileSync(path.join(__dirname, '..', 'index.js'), 'utf8');
  
  if (indexContent.includes('0.0.0.0')) {
    console.log('  ‚úÖ Binding sur 0.0.0.0 d√©tect√© (requis par Render)');
  } else {
    console.log('  ‚ö†Ô∏è  Pas de binding sur 0.0.0.0 d√©tect√©');
    console.log('      Assurez-vous que server.listen() utilise "0.0.0.0"');
    warnings++;
  }
  
  if (indexContent.includes('process.env.PORT')) {
    console.log('  ‚úÖ Utilisation de process.env.PORT d√©tect√©');
  } else {
    console.log('  ‚ùå process.env.PORT non d√©tect√©');
    console.log('      Render impose le port via cette variable');
    errors++;
  }
  
  if (indexContent.includes('process.env.MONGO_URI') || indexContent.includes('process.env.MONGODB_URI')) {
    console.log('  ‚úÖ Utilisation de MONGO_URI via env d√©tect√©');
  } else {
    console.log('  ‚ùå MONGO_URI non configur√© via process.env');
    errors++;
  }
} catch (e) {
  console.log('  ‚ùå Erreur lors de la lecture de index.js');
  errors++;
}

// V√©rification 7: Documentation
console.log('\nüìö V√©rification de la documentation...');
const docFiles = ['README.md', 'RENDER_SETUP.md', 'QUICK_START.md'];
docFiles.forEach(file => {
  if (fs.existsSync(path.join(__dirname, '..', file))) {
    console.log(`  ‚úÖ ${file} pr√©sent`);
  } else {
    console.log(`  ‚ö†Ô∏è  ${file} manquant`);
    warnings++;
  }
});

// R√©sum√©
console.log('\n' + '‚ïê'.repeat(60));
console.log('\nüìä R√âSUM√â\n');

if (errors === 0 && warnings === 0) {
  console.log('üéâ PARFAIT ! Votre application est pr√™te pour Render !\n');
  console.log('Prochaines √©tapes:');
  console.log('  1. Lisez QUICK_START.md pour d√©ployer en 10 minutes');
  console.log('  2. Configurez MongoDB Atlas');
  console.log('  3. G√©n√©rez un JWT_SECRET: node scripts/generate_jwt_secret.js');
  console.log('  4. D√©ployez sur Render\n');
  process.exit(0);
} else if (errors === 0) {
  console.log(`‚ö†Ô∏è  ${warnings} avertissement(s) d√©tect√©(s)\n`);
  console.log('Votre application devrait fonctionner, mais v√©rifiez les avertissements ci-dessus.\n');
  process.exit(0);
} else {
  console.log(`‚ùå ${errors} erreur(s) et ${warnings} avertissement(s) d√©tect√©(s)\n`);
  console.log('Corrigez les erreurs avant de d√©ployer sur Render.\n');
  process.exit(1);
}
