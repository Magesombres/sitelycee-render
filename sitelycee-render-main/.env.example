# ============================================
# FICHIER D'EXEMPLE - Configuration Render
# ============================================
# 
# Ce fichier sert de template. 
# NE PAS modifier ce fichier directement.
#
# Pour le développement local:
#   1. Copiez ce fichier: cp .env.example .env
#   2. Modifiez .env avec vos vraies valeurs
#
# Pour Render (production):
#   Configurez ces variables dans le dashboard Render
#   (Settings → Environment → Add Environment Variable)
#
# ============================================

# ============================================
# CONFIGURATION NODE
# ============================================
NODE_ENV=production
PORT=10000

# ============================================
# BASE DE DONNÉES MONGODB
# ============================================
# 
# EN LOCAL (développement):
#   MONGO_URI=mongodb://localhost:27017/sitelyee
#
# SUR RENDER (production):
#   Utilisez MongoDB Atlas (gratuit)
#   Exemple: mongodb+srv://username:password@cluster.mongodb.net/sitelyee?retryWrites=true&w=majority
#
# IMPORTANT: 
#   - Remplacez 'username' et 'password' par vos credentials MongoDB Atlas
#   - Si le mot de passe contient des caractères spéciaux (@, #, etc.),
#     encodez-les avec https://www.urlencoder.org/
#
MONGO_URI=mongodb://localhost:27017/sitelyee

# ============================================
# JWT SECRET (OBLIGATOIRE EN PRODUCTION)
# ============================================
#
# Pour générer un secret sécurisé:
#   node scripts/generate_jwt_secret.js
#
# Ou avec une commande shell:
#   node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
#
# ATTENTION: 
#   - NE JAMAIS commit un vrai JWT_SECRET dans Git
#   - Utilisez un secret différent pour chaque environnement
#   - Minimum 32 caractères aléatoires
#
JWT_SECRET=CHANGEZ_MOI_PAR_UN_SECRET_SECURISE

# ============================================
# CORS (Cross-Origin Resource Sharing)
# ============================================
#
# 1 = Autoriser tous les domaines (développement/production simple)
# 0 = Utiliser la logique CORS du code (plus restrictif)
#
CORS_ALLOW_ALL=1

# ============================================
# LOGS
# ============================================
#
# Niveaux disponibles: fatal, error, warn, info, debug, trace
# Recommandé: 
#   - production: info ou warn
#   - développement: debug
#
LOG_LEVEL=info

# ============================================
# RATE LIMITING (Protection anti-abus)
# ============================================
#
# RATE_LIMIT_WINDOW_MS: Fenêtre de temps en millisecondes
#   900000 = 15 minutes
#
# RATE_LIMIT_MAX: Nombre max de requêtes par fenêtre
#   150 = bon équilibre entre sécurité et usabilité
#   Réduire à 100 pour être plus strict
#   Augmenter à 200 pour être plus permissif
#
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=150

# ============================================
# UPLOADS & MÉDIAS (Optionnel)
# ============================================
#
# NSFW_THRESHOLD: Seuil de détection NSFW (0-1)
#   0.7 = 70% de confiance minimum pour rejeter
#   Plus bas = plus strict, Plus haut = plus permissif
#
# UPLOAD_MAX_DIM: Dimension maximale des images (pixels)
#   1600 = largeur/hauteur max
#
NSFW_THRESHOLD=0.7
UPLOAD_MAX_DIM=1600

# ============================================
# CLOUDINARY (Optionnel - Pour uploads en production)
# ============================================
#
# Si vous utilisez Cloudinary pour les uploads:
#   1. Créez un compte sur https://cloudinary.com
#   2. Récupérez vos credentials dans le dashboard
#   3. Décommentez et configurez les variables ci-dessous
#
# CLOUDINARY_NAME=your_cloud_name
# CLOUDINARY_KEY=your_api_key
# CLOUDINARY_SECRET=your_api_secret

# ============================================
# VARIABLES ADDITIONNELLES (Si nécessaire)
# ============================================
#
# Ajoutez ici d'autres variables d'environnement
# spécifiques à votre projet
#
